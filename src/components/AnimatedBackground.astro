---
const {showPicture, showStatic, animateStatic} = Astro.props;
---

<div class={[
  "bg",
  showStatic && "static",
  animateStatic && "anim-static",
  showPicture && "bg-image"
].filter(Boolean).join(" ")}></div>

<style>
.bg {
	background-color: var(--bg-color-transparent);

	position: absolute;
	height: 100%;
	max-height: 100%;
	width: 100%;
	max-width: 100%;
	overflow: hidden;
	z-index: -1;
}

.bg-image{
	background-image:
		linear-gradient(var(--bg-color-transparent), var(--bg-color-transparent)),
		url("/flying_wall.jpg");
	background-size: cover;
	background-position: center;
	backdrop-filter: blur(3px);
}

.static:before {
	content: "";
	pointer-events: none;

	background-color: transparent;
	background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 600 600'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)'/%3E%3C/svg%3E");
	background-repeat: repeat;
	background-size: 800px;
	opacity: 0.15;

	top: -35%;
	left: -35%;
	position: absolute;
	width: 200%;
	height: 200%;
}

.anim-static:before {
	animation: grain 5s steps(5) infinite;
}

@keyframes grain {

	0%,
	100% {
		transform: translate(0, 0)
	}

	20% {
		transform: translate(-5%, -10%)
	}

	40% {
		transform: translate(-15%, -15%)
	}

	60% {
		transform: translate(-10%, -25%)
	}

	80% {
		transform: translate(-5%, -10%)
	}
}
</style>
